{"version":3,"file":"gateway_settings.min.js","sources":["../src/gateway_settings.js"],"sourcesContent":["/**\n * Novalent payment plugin\n *\n * JavaScript for configuring API credentials.\n *\n * @author       Novalnet\n * @module     paygw_novalnet/gateway_settings\n * @copyright(C) Novalnet. All rights reserved. <https://www.novalnet.de/>\n * @license https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n    [\n        'jquery',\n        'core/ajax',\n        'core/notification',\n        'core/str'\n    ],\n    function(\n        $,\n        Ajax,\n        Notification,\n        Str\n    ) {\n\n    var SELECTORS = {\n        SELECTED_TARIFF: '[name=\"novalnet_tariff_id\"]',\n        FORM_PAYMENTS : ['CREDITCARD', 'DIRECT_DEBIT_SEPA', 'INVOICE', 'PREPAYMENT', 'CASHPAYMENT',\n            'GOOGLEPAY', 'APPLEPAY', 'PAYPAL', 'GUARANTEED_DIRECT_DEBIT_SEPA', 'GUARANTEED_INVOICE',\n            'INSTALMENT_INVOICE', 'INSTALMENT_DIRECT_DEBIT_SEPA']\n    };\n\n    /**\n     * Trigger the first load of the preview section and then listen for modifications\n     * to the form to reload the preview with new filter values.\n     * @param {jquery} formId The form element id.\n     *\n     */\n    var init = function(formId) {\n        var form = $('#' + formId);\n        var selectedTariff   = form.find(SELECTORS.SELECTED_TARIFF).val();\n\n        if (selectedTariff) {\n            $('[name=\"novalnet_selected_tariff\"]').val(selectedTariff);\n        }\n\n        // Hide all payment method headers\n        SELECTORS.FORM_PAYMENTS.forEach(function(method) {\n            var headerId = '#id_novalnet_' + method.toLowerCase() + '_settings';\n            $(headerId).hide();\n        });\n\n        if ( $('[name=\"novalnet_public_key\"]').length && $('[name=\"novalnet_key_password\"]').length ) {\n            $('#novalnet_tariff_id').prop('readonly', true);\n            if ( '' !== $.trim($('[name=\"novalnet_public_key\"]').val()) &&\n                 '' !== $.trim($('[name=\"novalnet_key_password\"]').val()) ) {\n                fillNovalnetDetails();\n            } else {\n                nullBasicParams();\n            }\n            $( '[name=\"novalnet_public_key\"], [name=\"novalnet_key_password\"]' ).on(\n                'input change',\n                function(e) {\n                    if ( '' !== $.trim($('[name=\"novalnet_public_key\"]').val()) &&\n                         '' !== $.trim($('[name=\"novalnet_key_password\"]').val()) ) {\n                        if ( 'input' === e.type ) {\n                            if (e.originalEvent.inputType != undefined && 'insertFromPaste' === e.originalEvent.inputType ) {\n                                fillNovalnetDetails();\n                            }\n                        } else {\n                            fillNovalnetDetails();\n                        }\n                    } else {\n                        nullBasicParams();\n                    }\n                }\n            ).change();\n        } else {\n            nullBasicParams();\n        }\n\n        $('[name=\"webhook_configure\"]').on(\n            'click',\n            function() {\n                if ( undefined === $('[name=\"novalnet_webhook_url\"]') || '' === $('[name=\"novalnet_webhook_url\"]').val() ) {\n                    var webhook_url_error = Str.get_string('novalnet_webhook_url_error', 'paygw_novalnet');\n                    Notification.alert('Error', webhook_url_error);\n                    return false;\n                }\n                var webhook_url = $.trim( $('[name=\"novalnet_webhook_url\"]').val() );\n                var regex       = /(http|https):\\/\\/(\\w+:{0,1}\\w*)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%!\\-\\/]))?/;\n\n                if ( ! regex .test( webhook_url )) {\n                    var webhook_url_error = Str.get_string('novalnet_webhook_url_error', 'paygw_novalnet');\n                    Notification.alert('Error', webhook_url_error);\n                    return false;\n                }\n\n                Str.get_strings([\n                    {key: 'confirm', component: 'moodle'},\n                    {key: 'novalnet_webhook_notice', component: 'paygw_novalnet'},\n                    {key: 'confirm', component: 'moodle'},\n                    {key: 'cancel', component: 'moodle'}\n                ]).done(function(strings) {\n                    Notification.confirm(\n                        strings[0], // Title.\n                        strings[1], // Novalnet webhook notice?\n                        strings[2], // Confirm.\n                        strings[3], // Cancel.\n                        function() {\n                            handleWebhookConfigure(webhook_url);\n                        }\n                    );\n                }).fail(Notification.exception);\n            }\n        ).change();\n\n        // Update the hidden field when the user changes the multi-select\n        $('[name=\"novalnet_active_payments[]\"]').on('change', function() {\n            var selectedValues = $(this).val() || [];\n            $('[name=\"novalnet_selected_payments\"]').val(selectedValues.join(','));\n        });\n\n        // Update the hidden field when the user changes the multi-select\n        $('[name=\"novalnet_test_mode_payments[]\"]').on('change', function() {\n            var selectedTestValues = $(this).val() || [];\n            $('[name=\"novalnet_selected_test_payments\"]').val(selectedTestValues.join(','));\n        });\n    };\n\n    var fillNovalnetTariffDetails = function(tariff) {\n        var tariffElement = $('[name=\"novalnet_tariff_id\"]');\n        var saved_tariff = $('[name=\"novalnet_selected_tariff\"]').val();\n\n        if ( 'text' == tariffElement.prop( 'type' ) ) {\n            tariffElement.replaceWith(\n                '<select class=\"form-select\" name=\"novalnet_tariff_id\" id=\"id_novalnet_tariff_id\"></select>'\n            );\n        }\n\n        tariffElement.empty();\n\n        for ( var tariff_id in tariff ) {\n            var tariff_type  = tariff[tariff_id].type;\n            var tariff_value = tariff[tariff_id].name;\n            tariffElement.append(\n                $(\n                    '<option>',\n                    {\n                        value: $.trim( tariff_id ),\n                        text : $.trim( tariff_value )\n                    }\n                ).attr( \"tariff_type\", $.trim( tariff_type ) )\n            );\n\n            /** Assign tariff id. */\n            if (saved_tariff === $.trim( tariff_id ) ) {\n                tariffElement.val( $.trim( tariff_id ) );\n                $('[name=\"novalnet_tariff_type\"]' ).val( $.trim( tariff_type ) );\n            }\n        }\n    };\n\n    var fillNovalnetPaymentDetails = function(payment_types) {\n        var paymentElement = $('[name=\"novalnet_active_payments[]\"]');\n        var testPaymentElement = $('[name=\"novalnet_test_mode_payments[]\"]');\n        var novalnetPayments = ['ALIPAY', 'APPLEPAY', 'BANCONTACT', 'BLIK', 'CASHPAYMENT', 'CASH_ON_DELIVERY', 'CREDITCARD',\n                                'DIRECT_DEBIT_ACH', 'DIRECT_DEBIT_SEPA', 'EPS', 'GIROPAY', 'GOOGLEPAY',\n                                'GUARANTEED_DIRECT_DEBIT_SEPA', 'GUARANTEED_INVOICE', 'IDEAL', 'INSTALMENT_DIRECT_DEBIT_SEPA',\n                                'IDEAL', 'INSTALMENT_INVOICE', 'INVOICE', 'PREPAYMENT','MBWAY', 'MULTIBANCO',\n                                'ONLINE_BANK_TRANSFER', 'ONLINE_TRANSFER', 'PAYCONIQ', 'PAYPAL', 'POSTFINANCE',\n                                'POSTFINANCE_CARD', 'PRZELEWY24', 'TRUSTLY', 'TWINT', 'WECHATPAY'];\n        var savedPayments = $('[name=\"novalnet_selected_payments\"]').val();\n        savedPayments = savedPayments ? savedPayments.split(',') : [];\n        var savedTestPayments = $('[name=\"novalnet_selected_test_payments\"]').val();\n        savedTestPayments = savedTestPayments ? savedTestPayments.split(',') : [];\n\n        paymentElement.empty(); // Remove all existing options\n        testPaymentElement.empty(); // Remove all existing options\n        payment_types.forEach(function(novalnetPayment) {\n\n            if ($.inArray(novalnetPayment, novalnetPayments) === -1) {\n                return; // Skip if payment type is not in the allowed list\n            }\n\n            var strings = [\n                {\n                    key: novalnetPayment,\n                    component: 'paygw_novalnet'\n                }\n            ];\n\n            Str.get_strings(strings).then(function(langStrings) {\n                var optionText = langStrings && langStrings.length ? langStrings : novalnetPayment;\n\n                /**\n                 * Adds a new option to the given element if the value does not already exist in the element's options.\n                 *\n                 * @param {HTMLElement} element - The DOM element (typically a <select>) to which the option will be added.\n                 * @param {string} value - The value of the option to be added.\n                 * @param {string} text - The text that will be displayed for the new option.\n                 * @returns {boolean} Returns true if the option was added, false if the option already exists.\n                 */\n                function addOptionIfNotExists(element, value, text) {\n                    if (element.find(`option[value=\"${value}\"]`).length === 0) {\n                        element.append($('<option>', {\n                            value: $.trim(value),\n                            text: text\n                        }));\n                    }\n                }\n\n                // Add the option to both payment elements\n                addOptionIfNotExists(paymentElement, novalnetPayment, optionText);\n                addOptionIfNotExists(testPaymentElement, novalnetPayment, optionText);\n\n                /**\n                 * Selects an option from a given element if the value is present in the provided list.\n                 *\n                 * @param {HTMLElement} element - The DOM element where the option is located.\n                 * @param {string} value - The value to check against the list.\n                 * @param {Array<string>} list - An array of values to compare the value against.\n                 * @returns {boolean} Returns true if the value was found and the option was selected, otherwise false.\n                 */\n                function selectOptionIfInList(element, value, list) {\n                    if ($.inArray(value, list) !== -1) {\n                        element.find(`option[value=\"${value}\"]`).prop('selected', true);\n                    }\n                }\n\n                // Set the option as selected if it's in the savedPayments list\n                selectOptionIfInList(paymentElement, novalnetPayment, savedPayments);\n                selectOptionIfInList(testPaymentElement, novalnetPayment, savedTestPayments);\n            });\n\n            // Display settings relevant to the active payment methods only\n            if (SELECTORS.FORM_PAYMENTS.includes(novalnetPayment)) {\n                var selectedHeaderId = '#id_novalnet_' + novalnetPayment.toLowerCase() + '_settings';\n                $(selectedHeaderId).show();\n            }\n        });\n    };\n\n    var handleWebhookConfigure = function(webhook_url) {\n        const request = {\n            methodname: 'paygw_novalnet_handle_webhook_configure',\n            args: {\n                novalnetApiKey: $.trim($('[name=\"novalnet_public_key\"]').val()),\n                novalnetKeyPassword: $.trim($('[name=\"novalnet_key_password\"]').val()),\n                novalnetWebhookUrl: webhook_url\n            },\n        };\n\n        Ajax.call([request])[0].then(response => {\n            var response = JSON.parse(response.response);\n                if ( '' !== response.result.status && 'SUCCESS' == response.result.status && 100 == response.result.status_code ) {\n                    var message = Str.get_string('novalnet_webhook_configure_success', 'paygw_novalnet');\n                    var type = 'success';\n                } else {\n                    var message = response.result.status_text;\n                    var type = 'error';\n                }\n\n                Notification.addNotification({\n                    message: message,\n                    type: type\n                });\n\n                return;\n        });\n    };\n\n    var fillNovalnetDetails = function() {\n        const request = {\n            methodname: 'paygw_novalnet_get_merchant_details',\n            args: {\n                novalnetApiKey: $.trim($('[name=\"novalnet_public_key\"]').val()),\n                novalnetKeyPassword: $.trim($('[name=\"novalnet_key_password\"]').val()),\n                id : $.trim($('[name=\"id\"]').val()),\n                accountid: $.trim($('[name=\"accountid\"]').val()),\n                gateway: $.trim($('[name=\"gateway\"]').val()),\n            },\n        };\n\n        Ajax.call([request])[0].then(response => {\n            var response = JSON.parse(response.response);\n                if ( '' !== response.result.status && 'SUCCESS' == response.result.status && 100 == response.result.status_code ) {\n                    fillNovalnetTariffDetails(response.merchant.tariff);\n                    fillNovalnetPaymentDetails(response.merchant.payment_types);\n                } else {\n                    nullBasicParams();\n                    Notification.addNotification({\n                        message: response.result.status_text,\n                        type: 'error'\n                    });\n                }\n        });\n    };\n\n    /**\n     * Null config values\n     *\n     */\n    var nullBasicParams = function () {\n        $('[name=\"novalnet_active_payments[]\"]').empty();\n        $('[name=\"novalnet_test_mode_payments[]\"]').empty();\n        $('[name=\"novalnet_tariff_id\"]').empty();\n        $( '#novalnet_tariff_id' ).find( 'option' ).remove();\n    };\n\n    return {\n        init: init\n    };\n});\n"],"names":["define","$","Ajax","Notification","Str","SELECTORS","SELECTED_TARIFF","FORM_PAYMENTS","handleWebhookConfigure","webhook_url","request","methodname","args","novalnetApiKey","trim","val","novalnetKeyPassword","novalnetWebhookUrl","call","then","response","JSON","parse","result","status","status_code","message","get_string","type","status_text","addNotification","fillNovalnetDetails","id","accountid","gateway","tariff","tariffElement","saved_tariff","tariff_id","prop","replaceWith","empty","tariff_type","tariff_value","name","append","value","text","attr","fillNovalnetTariffDetails","merchant","payment_types","paymentElement","testPaymentElement","novalnetPayments","savedPayments","split","savedTestPayments","forEach","novalnetPayment","inArray","strings","key","component","get_strings","langStrings","optionText","length","addOptionIfNotExists","element","find","selectOptionIfInList","list","includes","selectedHeaderId","toLowerCase","show","fillNovalnetPaymentDetails","nullBasicParams","remove","init","formId","selectedTariff","method","headerId","hide","on","e","undefined","originalEvent","inputType","change","webhook_url_error","alert","test","done","confirm","fail","exception","selectedValues","this","join","selectedTestValues"],"mappings":"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"}