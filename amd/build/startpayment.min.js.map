{"version":3,"file":"startpayment.min.js","sources":["../src/startpayment.js"],"sourcesContent":["/**\n *  Novalnet payment plugin\n *\n * Payment integration for the Novalnet system\n *\n * @author       Novalnet\n * @module     paygw_novalnet/startpayment\n * @copyright(C) Novalnet. All rights reserved. <https://www.novalnet.de/>\n * @license https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Repository from 'paygw_novalnet/repository';\nimport * as Notification from 'core/notification';\nimport * as str from 'core/str';\n\n/**\n * Detect selected payment method (if we have one).\n *\n * @returns {String|null}\n */\nfunction getSelectedPaymentMethod() {\n    let el = document.querySelector('input[name=\"method\"][type=\"radio\"]:checked');\n\n    if (typeof el !== 'undefined' && el !== null) {\n        return el.value;\n    }\n    return null;\n}\n\n/**\n * Create payment in the backend and redirect.\n *\n * @param {String} selector\n * @returns {Promise}\n */\nexport const startPayment = (selector) => {\n    document.querySelectorAll('button'+ selector).forEach(function(button) {\n        button.addEventListener('click', e => {\n            e.preventDefault();\n            const dataset = e.currentTarget.dataset;\n            var PaymentMethod = getSelectedPaymentMethod();\n\n            if ( PaymentMethod === null ) {\n                Notification.alert('', str.get_string('startpayment:failed:nopayment', 'paygw_novalnet'));\n                return;\n            }\n\n            Repository.createPayment(\n                    dataset.component,\n                    dataset.paymentarea,\n                    dataset.itemid,\n                    dataset.description,\n                    PaymentMethod\n            ).then(result => {\n                if (result.success) {\n                    window.location.href = result.redirecturl;\n                } else {\n                    str.get_strings([\n                            {key: 'startpayment:failed:title', component: 'paygw_novalnet'},\n                            {key: 'startpayment:failed:btncancel', component: 'paygw_novalnet'},\n                    ]).then(strings => {\n                        Notification.alert(strings[0], result.message, strings[1]);\n                    });\n                }\n                return Promise.resolve();\n            }).catch(Notification.exception);\n        });\n    });\n};\n"],"names":["selector","document","querySelectorAll","forEach","button","addEventListener","e","preventDefault","dataset","currentTarget","PaymentMethod","el","querySelector","value","getSelectedPaymentMethod","Repository","createPayment","component","paymentarea","itemid","description","then","result","success","window","location","href","redirecturl","str","get_strings","key","strings","Notification","alert","message","Promise","resolve","catch","exception","get_string"],"mappings":";;;;;;;;;;mPAmC6BA,WACzBC,SAASC,iBAAiB,SAAUF,UAAUG,SAAQ,SAASC,QAC3DA,OAAOC,iBAAiB,SAASC,IAC7BA,EAAEC,uBACIC,QAAUF,EAAEG,cAAcD,YAC5BE,6BAnBRC,GAAKV,SAASW,cAAc,qDAE5B,MAAOD,GACAA,GAAGE,MAEP,KAcqBC,GAEG,OAAlBJ,cAKLK,WAAWC,cACHR,QAAQS,UACRT,QAAQU,YACRV,QAAQW,OACRX,QAAQY,YACRV,eACNW,MAAKC,SACCA,OAAOC,QACPC,OAAOC,SAASC,KAAOJ,OAAOK,YAE9BC,IAAIC,YAAY,CACR,CAACC,IAAK,4BAA6Bb,UAAW,kBAC9C,CAACa,IAAK,gCAAiCb,UAAW,oBACvDI,MAAKU,UACJC,aAAaC,MAAMF,QAAQ,GAAIT,OAAOY,QAASH,QAAQ,OAGxDI,QAAQC,aAChBC,MAAML,aAAaM,WAtBlBN,aAAaC,MAAM,GAAIL,IAAIW,WAAW,gCAAiC"}